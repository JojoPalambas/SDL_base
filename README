                        ╦═╗╔═╗╔═╗╔╦╗╔╦╗╔═╗
                        ╠╦╝║╣ ╠═╣ ║║║║║║╣
                        ╩╚═╚═╝╩ ╩═╩╝╩ ╩╚═╝

CONTENTS OF THIS FILE
---------------------

  * Prologue
    - Introduction
    - Requirements
    - Recommended modules
    - Installation
    - Configuration
    - Troubleshooting
    - FAQ
    - Maintainers
  * How to use
    - Architecture
    - Animators & animations


        ================
            PROLOGUE
        ================

INTRODUCTION
------------

The purpose of this project is to create a base that could be used by almost
every SDL game project ever.

Its architecture both precise and permissive. It is precise because you should
use it in almost only one way possible, using the structures and functions
contained in the project. It is permissive because almost any kind of pixeled
game can be done using this, and non-pixeled games too (with some
modifications).


REQUIREMENTS
------------

Before using this, you should:
  * Know how to code in C language
  * Know a little bit of SDL manipulation


RECOMMENDED MODULES
-------------------

  * C Standard Library
  * SDL2, SDL2_image, SDL2_ttf, SDL2_mixer modules


INSTALLATION
------------

This project comes with an example, a mini-game containing a main menu, a game
where the player has to make his character reach the red door or the blue door
using the directionnal and with the possibility to jump, a pause menu, a victory
menu and a game over menu. To play the game:
  * Compile it by typing "make" in the root
  * Play it by typing "./main" in the root
  * Remove compiled files by typing "make clean" in the root


TROUBLESHOOTING
---------------

  * If the program is not working properly
    - Check you have the recommended modules
    - Relaunch the game
    - Remove the compiled files and re-compile
    - Maybe try to solve the problem if indicated by the compiler or the game
    - Email me at gabriel.depotte@outlook.com and explain me the problem


FAQ
---


MAINTAINERS
-----------

Current maintainers:
 * Gabriel Depotte (JojoPalambas, <gabriel.depotte@outlook.com>)

        ==================
            HOW TO USE
        ==================

ARCHITECTURE
------------

Excluding the very basic files as AUTHORS, README, TODO, the project is shared
in two folders:

  * The ressources folder contains all the non-code ressources of the project,
    such as animators (see Animators & animations section), maps or texts.

  * The src folder contains all and only the code of the project. It is
    subdivided in a few main files and folders:
      - main.c: contains the main program, i.e. the loop switching between the
        menus and the game
      - include.h: the master header file, including all the other headers and
        being included by them too. It is the hub of the code: it is the only
        one ho should include standard headers, as the standard library headers
        and the SDL headers. It should be kept clean and clear, and explicitely
        declare only the most global structures and functions
      - general: contains functions that can be useful anywhere in the program,
        even in the menus, such as basic displaying functions, time manager, or
        the program's global initializer and destructor.
      - logo: contains all the functions used to display the logo at the
        beginning of the game
      - menu: contains all the functions used to manage the menus: main menu,
        game over menu, victory menu, in-game pause menu and even more if you
        want
      - object: contains all the functions used to manage objects in general,
        such as the functions used to display animations or tpo manage
        collisions


ANIMATORS & ANIMATIONS
----------------------

One of the strengths of this project is a smart management of animations and
hitboxes, shared in four structures:

  * The animator structure is the most top-level structure. It's the one that
    will go directly in displayed objects, such as the main character, monsters,
    blocks or even the background of the main menu.

    This structure will be used anytime when the program needs to
    display the object or to check its hitbox. It contains a pointer to an
    animation, which corresponds to the current animation displayed by the
    animator, an array of pointers to animations corresponding to all the
    animations displayable by the animator, and an int storing the length of the
    array.

  * The animation structure (abbreviated by "anim" in the functions names) is
    the most sophisticated structure, managing both animations and hitboxes. The
    phylosophy behind this structure is to allow each animation to have its
    hitbox, different from the ones in the other animations, to allow a creature
    to become indestructible, transparent, or vulnerable. As you will see in the
    next point, with this implementation, even every single frame can have its
    own set of hitboxes , to perfectly match its proportions anytime.

    This structure contains an array containing pointers to all the frames of
    the animation, an int pointing to the current frame in the array and an int
    storing the size of the array. It also contains 8 values describing the flow
    of the frames:
      - frame_duration: duration of the frame, i.e. number of tics (i.e. number
        of updates) that the frame will last (or maximum duration of the frame,
        if its duration is set to random (see below))
      - counter: time remaining until the end of the current frame. If it equals
        0, the current frame is changed and the value of the counter is set to
        frame_duration or to a random value between min_frame_duration and
        frame_duration if the duration is set to random
      - min_frame_duration: minimum duration of the frame if its duration is set
        to random (see below)
      - random_duration: if this value is set to 1, every time the frame
        changes, the counter is randomly set between min_frame_duration and
        frame_duration included
      - random_order: if this value is set to 1, every time the frame changes,
        the new frame is randomly chosen in all the frames of the animation
      - repeat: if random_order is set to 1, this variable chooses whether
        the the current frame can be chosen as the next frame
      - loop: if loop is set to 0, the animation ends when the last frame is
        reached, and is replaced by another one
      - next: a pointer to the next animation if loop is set to 0.



print hitbox
appel de animator_display(enum) (changement d'anim, changement de frame)
appel des check hitbox


                    ╔╦╗╦ ╦╔═╗╔╗╔╦╔═  ╦ ╦╔═╗╦ ╦
                     ║ ╠═╣╠═╣║║║╠╩╗  ╚╦╝║ ║║ ║
                     ╩ ╩ ╩╩ ╩╝╚╝╩ ╩   ╩ ╚═╝╚═╝
